{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Genmod Annotating and analyzing primarily genetic models in the VCF file format. Overview The main function is to annotate accurate patterns of inheritance for each variant in a vcf file including one or several families of arbitrary size. By default variants will be annotated from the human refGene database but alternative annotations can be built with genmod build . genmod can also be used for annotating variants with their frequencies in 1000G, ExAC or their predicted CADD scores, see genmod annotate . genmod uses multithreading to annotate variants and operates fast for both whole exome data and whole genome data. Installation GENMOD pip install genmod or git clone https://github.com/Clinical-Genomics/genmod.git cd genmod python setup.py install Example: The basic idea with genmod is to make fast and easy analysis of vcf variants for rare disease. It can still be interesting to use in other cases, such as annotating what genetic regions the variants in a bacteria belongs to. genmod can annotate accurate patterns of inheritance in arbitrary sized families. The genetic models checked are the basic mendelian ones, these are: Autsomal Recessive, denoted 'AR_hom' Autsomal Recessive denovo, denoted 'AR_hom_dn' Autsomal Dominant, 'AD' Autsomal Dominant denovo, 'AD_dn' Autosomal Compound Heterozygote, 'AR_comp' X-linked dominant, 'XD' X-linked dominant de novo, 'XD_dn' X-linked Recessive, 'XR' X-linked Recessive de novo, 'XR_dn' The following command should work when installed successfully. The files are distributed with the package. $ cat examples/test_vcf.vcf ##fileformat=VCFv4.1 ##INFO=<ID=MQ,Number=1,Type=Float,Description=\"RMS Mapping Quality\"> ##contig=<ID=1,length=249250621,assembly=b37> ##reference=file:///humgen/gsa-hpprojects/GATK/bundle/current/b37/human_g1k_v37.fasta #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT father mother proband father_2 mother_2 proband_2 1 879537 . T C 100 PASS MQ=1 GT:AD:GQ 0/1:10,10:60 0/1:10,10:60 1/1:10,10:60 0/0:10,10:60 0/1:10,10:60 1/1:10,10:60 1 879541 . G A 100 PASS MQ=1 GT:AD:GQ ./. 0/1:10,10:60 1/1:10,10:60 ./. 0/1:10,10:60 0/1:10,10:60 1 879595 . C T 100 PASS MQ=1 GT:AD:GQ 0/1:10,10:60 0/0:10,10:60 1/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 1 879676 . G A 100 PASS MQ=1 GT:AD:GQ 0/1:10,10:60 1/1:10,10:60 1/1:10,10:60 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 1 879911 . G A 100 PASS MQ=1 GT:AD:GQ 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 1 880012 . A G 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 1 880086 . T C 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 1 880199 . G A 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 1 880217 . T G 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 10 76154051 . A G 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 10 76154073 . T G 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 10 76154074 . C G 100 PASS MQ=1 GT:AD:GQ ./. 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 10 76154076 . G C 100 PASS MQ=1 GT:AD:GQ ./. 0/0:10,10:60 0/1:10,10:60 ./. 0/0:10,10:60 0/1:10,10:60 X 302253 . CCCTCCTGCCCCT C 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 1/1:10,10:60 0/0:10,10:60 1/1:10,10:60 1/1:10,10:60 MT 302253 . CCCTCCTGCCCCT C 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 1/1:10,10:60 0/0:10,10:60 1/1:10,10:60 1/1:10,10:60 $ cat examples/test_vcf.vcf |\\ >genmod annotate - --annotate_regions |\\ >genmod models - --family_file examples/recessive_trio.ped > test_vcf_models_annotated.vcf $ cat test_vcf_models_annotated.vcf ##fileformat=VCFv4.1 ##INFO=<ID=MQ,Number=1,Type=Float,Description=\"RMS Mapping Quality\"> ##INFO=<ID=Annotation,Number=.,Type=String,Description=\"Annotates what feature(s) this variant belongs to.\"> ##INFO=<ID=Exonic,Number=0,Type=Flag,Description=\"Indicates if the variant is exonic.\"> ##INFO=<ID=GeneticModels,Number=.,Type=String,Description=\"':'-separated list of genetic models for this variant.\"> ##INFO=<ID=ModelScore,Number=.,Type=String,Description=\"PHRED score for genotype models.\"> ##INFO=<ID=Compounds,Number=.,Type=String,Description=\"List of compound pairs for this variant.The list is splitted on ',' family id is separated with compoundswith ':'. Compounds are separated with '|'.\"> ##contig=<ID=1,length=249250621,assembly=b37> ##reference=file:///humgen/gsa-hpprojects/GATK/bundle/current/b37/human_g1k_v37.fasta ##Software=<ID=genmod,Version=3.0.1,Date=\"2015-09-22 08:40\",CommandLineOptions=\"processes=4 keyword=Annotation family_type=ped family_file=<open file 'examples/recessive_trio.ped', mode 'r' at 0x102d3a780> variant_file=<_io.TextIOWrapper name='<stdin>' encoding='utf-8'> logger=<logging.Logger object at 0x102d64250>\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT father mother proband father_2 mother_2 proband_2 1 879537 . T C 100 PASS MQ=1;Exonic;Annotation=SAMD11;GeneticModels=1:AR_hom;ModelScore=1:55.0 GT:AD:GQ 0/1:10,10:60 0/1:10,10:60 1/1:10,10:60 0/0:10,10:60 0/1:10,10:60 1/1:10,10:60 1 879541 . G A 100 PASS MQ=1;Exonic;Annotation=SAMD11;GeneticModels=1:AR_hom_dn|AR_hom;ModelScore=1:57.0 GT:AD:GQ ./. 0/1:10,10:60 1/1:10,10:60 ./. 0/1:10,10:60 0/1:10,10:60 1 879595 . C T 100 PASS MQ=1;Exonic;Annotation=NOC2L,SAMD11;GeneticModels=1:AR_hom_dn;ModelScore=1:55.0 GT:AD:GQ 0/1:10,10:60 0/0:10,10:60 1/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 1 879676 . G A 100 PASS MQ=1;Exonic;Annotation=NOC2L,SAMD11 GT:AD:GQ 0/1:10,10:60 1/1:10,10:60 1/1:10,10:60 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 1 879911 . G A 100 PASS MQ=1;Exonic;Annotation=NOC2L,SAMD11;Compounds=1:1_880086_T_C|1_880012_A_G;GeneticModels=1:AR_comp|AR_comp_dn;ModelScore=1:55.0 GT:AD:GQ 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 1 880012 . A G 100 PASS MQ=1;Exonic;Annotation=NOC2L;Compounds=1:1_879911_G_A|1_880086_T_C;GeneticModels=1:AR_comp|AR_comp_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 1 880086 . T C 100 PASS MQ=1;Exonic;Annotation=NOC2L;Compounds=1:1_879911_G_A|1_880012_A_G;GeneticModels=1:AD_dn|AR_comp_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 1 880199 . G A 100 PASS MQ=1;Annotation=NOC2L;GeneticModels=1:AD_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 1 880217 . T G 100 PASS MQ=1;Annotation=NOC2L;GeneticModels=1:AD_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 10 76154051 . A G 100 PASS MQ=1;Exonic;Annotation=ADK;Compounds=1:10_76154073_T_G;GeneticModels=1:AR_comp_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 10 76154073 . T G 100 PASS MQ=1;Exonic;Annotation=ADK;Compounds=1:10_76154051_A_G;GeneticModels=1:AD_dn|AR_comp_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 10 76154074 . C G 100 PASS MQ=1;Annotation=ADK GT:AD:GQ ./. 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 10 76154076 . G C 100 PASS MQ=1;Annotation=ADK;GeneticModels=1:AD_dn|AD;ModelScore=1:57.0 GT:AD:GQ ./. 0/0:10,10:60 0/1:10,10:60 ./. 0/0:10,10:60 0/1:10,10:60 X 302253 . CCCTCCTGCCCCT C 100 PASS MQ=1;Annotation=PPP2R3B;GeneticModels=1:XD|XR;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 1/1:10,10:60 0/0:10,10:60 1/1:10,10:60 1/1:10,10:60 MT 302253 . CCCTCCTGCCCCT C 100 PASS MQ=1;GeneticModels=1:AR_hom_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 1/1:10,10:60 0/0:10,10:60 1/1:10,10:60 1/1:10,10:60 genmod is made for working on any type of annotated vcf. To get relevant Autosomal Compound Heterozygotes we need to know what genetic regions that the variants belong to. We can use annotations from the Variant Effect Predictor or let genmod do the annotation. genmod comes with a prebuilt annotation data base that is made from the latest refSeq dataset. We can also build new annotation sets with genmod build , please see wiki for mor info. (There are files for testing the following commands in genmod/examples) To annotate the variants with regions use $genmod annotate <vcf_file> -r/--annotate_regions (-a/--annotation_dir) Now the variants are ready to get their models annotated: $genmod models <vcf_file> -f/--family_file <family.ped>","title":"Home"},{"location":"#genmod","text":"Annotating and analyzing primarily genetic models in the VCF file format.","title":"Genmod"},{"location":"#overview","text":"The main function is to annotate accurate patterns of inheritance for each variant in a vcf file including one or several families of arbitrary size. By default variants will be annotated from the human refGene database but alternative annotations can be built with genmod build . genmod can also be used for annotating variants with their frequencies in 1000G, ExAC or their predicted CADD scores, see genmod annotate . genmod uses multithreading to annotate variants and operates fast for both whole exome data and whole genome data.","title":"Overview"},{"location":"#installation","text":"GENMOD pip install genmod or git clone https://github.com/Clinical-Genomics/genmod.git cd genmod python setup.py install","title":"Installation"},{"location":"#example","text":"The basic idea with genmod is to make fast and easy analysis of vcf variants for rare disease. It can still be interesting to use in other cases, such as annotating what genetic regions the variants in a bacteria belongs to. genmod can annotate accurate patterns of inheritance in arbitrary sized families. The genetic models checked are the basic mendelian ones, these are: Autsomal Recessive, denoted 'AR_hom' Autsomal Recessive denovo, denoted 'AR_hom_dn' Autsomal Dominant, 'AD' Autsomal Dominant denovo, 'AD_dn' Autosomal Compound Heterozygote, 'AR_comp' X-linked dominant, 'XD' X-linked dominant de novo, 'XD_dn' X-linked Recessive, 'XR' X-linked Recessive de novo, 'XR_dn' The following command should work when installed successfully. The files are distributed with the package. $ cat examples/test_vcf.vcf ##fileformat=VCFv4.1 ##INFO=<ID=MQ,Number=1,Type=Float,Description=\"RMS Mapping Quality\"> ##contig=<ID=1,length=249250621,assembly=b37> ##reference=file:///humgen/gsa-hpprojects/GATK/bundle/current/b37/human_g1k_v37.fasta #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT father mother proband father_2 mother_2 proband_2 1 879537 . T C 100 PASS MQ=1 GT:AD:GQ 0/1:10,10:60 0/1:10,10:60 1/1:10,10:60 0/0:10,10:60 0/1:10,10:60 1/1:10,10:60 1 879541 . G A 100 PASS MQ=1 GT:AD:GQ ./. 0/1:10,10:60 1/1:10,10:60 ./. 0/1:10,10:60 0/1:10,10:60 1 879595 . C T 100 PASS MQ=1 GT:AD:GQ 0/1:10,10:60 0/0:10,10:60 1/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 1 879676 . G A 100 PASS MQ=1 GT:AD:GQ 0/1:10,10:60 1/1:10,10:60 1/1:10,10:60 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 1 879911 . G A 100 PASS MQ=1 GT:AD:GQ 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 1 880012 . A G 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 1 880086 . T C 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 1 880199 . G A 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 1 880217 . T G 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 10 76154051 . A G 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 10 76154073 . T G 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 10 76154074 . C G 100 PASS MQ=1 GT:AD:GQ ./. 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 10 76154076 . G C 100 PASS MQ=1 GT:AD:GQ ./. 0/0:10,10:60 0/1:10,10:60 ./. 0/0:10,10:60 0/1:10,10:60 X 302253 . CCCTCCTGCCCCT C 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 1/1:10,10:60 0/0:10,10:60 1/1:10,10:60 1/1:10,10:60 MT 302253 . CCCTCCTGCCCCT C 100 PASS MQ=1 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 1/1:10,10:60 0/0:10,10:60 1/1:10,10:60 1/1:10,10:60 $ cat examples/test_vcf.vcf |\\ >genmod annotate - --annotate_regions |\\ >genmod models - --family_file examples/recessive_trio.ped > test_vcf_models_annotated.vcf $ cat test_vcf_models_annotated.vcf ##fileformat=VCFv4.1 ##INFO=<ID=MQ,Number=1,Type=Float,Description=\"RMS Mapping Quality\"> ##INFO=<ID=Annotation,Number=.,Type=String,Description=\"Annotates what feature(s) this variant belongs to.\"> ##INFO=<ID=Exonic,Number=0,Type=Flag,Description=\"Indicates if the variant is exonic.\"> ##INFO=<ID=GeneticModels,Number=.,Type=String,Description=\"':'-separated list of genetic models for this variant.\"> ##INFO=<ID=ModelScore,Number=.,Type=String,Description=\"PHRED score for genotype models.\"> ##INFO=<ID=Compounds,Number=.,Type=String,Description=\"List of compound pairs for this variant.The list is splitted on ',' family id is separated with compoundswith ':'. Compounds are separated with '|'.\"> ##contig=<ID=1,length=249250621,assembly=b37> ##reference=file:///humgen/gsa-hpprojects/GATK/bundle/current/b37/human_g1k_v37.fasta ##Software=<ID=genmod,Version=3.0.1,Date=\"2015-09-22 08:40\",CommandLineOptions=\"processes=4 keyword=Annotation family_type=ped family_file=<open file 'examples/recessive_trio.ped', mode 'r' at 0x102d3a780> variant_file=<_io.TextIOWrapper name='<stdin>' encoding='utf-8'> logger=<logging.Logger object at 0x102d64250>\"> #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT father mother proband father_2 mother_2 proband_2 1 879537 . T C 100 PASS MQ=1;Exonic;Annotation=SAMD11;GeneticModels=1:AR_hom;ModelScore=1:55.0 GT:AD:GQ 0/1:10,10:60 0/1:10,10:60 1/1:10,10:60 0/0:10,10:60 0/1:10,10:60 1/1:10,10:60 1 879541 . G A 100 PASS MQ=1;Exonic;Annotation=SAMD11;GeneticModels=1:AR_hom_dn|AR_hom;ModelScore=1:57.0 GT:AD:GQ ./. 0/1:10,10:60 1/1:10,10:60 ./. 0/1:10,10:60 0/1:10,10:60 1 879595 . C T 100 PASS MQ=1;Exonic;Annotation=NOC2L,SAMD11;GeneticModels=1:AR_hom_dn;ModelScore=1:55.0 GT:AD:GQ 0/1:10,10:60 0/0:10,10:60 1/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 1 879676 . G A 100 PASS MQ=1;Exonic;Annotation=NOC2L,SAMD11 GT:AD:GQ 0/1:10,10:60 1/1:10,10:60 1/1:10,10:60 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 1 879911 . G A 100 PASS MQ=1;Exonic;Annotation=NOC2L,SAMD11;Compounds=1:1_880086_T_C|1_880012_A_G;GeneticModels=1:AR_comp|AR_comp_dn;ModelScore=1:55.0 GT:AD:GQ 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 1 880012 . A G 100 PASS MQ=1;Exonic;Annotation=NOC2L;Compounds=1:1_879911_G_A|1_880086_T_C;GeneticModels=1:AR_comp|AR_comp_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 1 880086 . T C 100 PASS MQ=1;Exonic;Annotation=NOC2L;Compounds=1:1_879911_G_A|1_880012_A_G;GeneticModels=1:AD_dn|AR_comp_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 1 880199 . G A 100 PASS MQ=1;Annotation=NOC2L;GeneticModels=1:AD_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 1 880217 . T G 100 PASS MQ=1;Annotation=NOC2L;GeneticModels=1:AD_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 10 76154051 . A G 100 PASS MQ=1;Exonic;Annotation=ADK;Compounds=1:10_76154073_T_G;GeneticModels=1:AR_comp_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 0/0:10,10:60 0/1:10,10:60 0/1:10,10:60 10 76154073 . T G 100 PASS MQ=1;Exonic;Annotation=ADK;Compounds=1:10_76154051_A_G;GeneticModels=1:AD_dn|AR_comp_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 0/0:10,10:60 0/0:10,10:60 0/1:10,10:60 10 76154074 . C G 100 PASS MQ=1;Annotation=ADK GT:AD:GQ ./. 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 0/1:10,10:60 10 76154076 . G C 100 PASS MQ=1;Annotation=ADK;GeneticModels=1:AD_dn|AD;ModelScore=1:57.0 GT:AD:GQ ./. 0/0:10,10:60 0/1:10,10:60 ./. 0/0:10,10:60 0/1:10,10:60 X 302253 . CCCTCCTGCCCCT C 100 PASS MQ=1;Annotation=PPP2R3B;GeneticModels=1:XD|XR;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 1/1:10,10:60 0/0:10,10:60 1/1:10,10:60 1/1:10,10:60 MT 302253 . CCCTCCTGCCCCT C 100 PASS MQ=1;GeneticModels=1:AR_hom_dn;ModelScore=1:55.0 GT:AD:GQ 0/0:10,10:60 0/1:10,10:60 1/1:10,10:60 0/0:10,10:60 1/1:10,10:60 1/1:10,10:60 genmod is made for working on any type of annotated vcf. To get relevant Autosomal Compound Heterozygotes we need to know what genetic regions that the variants belong to. We can use annotations from the Variant Effect Predictor or let genmod do the annotation. genmod comes with a prebuilt annotation data base that is made from the latest refSeq dataset. We can also build new annotation sets with genmod build , please see wiki for mor info. (There are files for testing the following commands in genmod/examples) To annotate the variants with regions use $genmod annotate <vcf_file> -r/--annotate_regions (-a/--annotation_dir) Now the variants are ready to get their models annotated: $genmod models <vcf_file> -f/--family_file <family.ped>","title":"Example:"},{"location":"genetic-models/","text":"Conditions for Genetic Models Short explanation of genotype calls in VCF format: Since we only look at humans, that are diploid, the genotypes represent what we see on both alleles in a single position. 0 represents the reference sequence, 1 is the first of the alternative alleles, 2 second alternative and so on. If no phasing has been done the genotype is an unordered pair on the form x/x , so 0/1 means that the individual is heterozygote in this given position with the reference base on one of the alleles and the first of the alternatives on the other. 2/2 means that we see the second of the alternatives on both alleles. Some chromosomes are only present in one copy in humans, here it is allowed to only use a single digit to show the genotype. A 0 would mean reference and 1 first of alternatives. If phasing has been done the pairs are not unordered anymore and the delimiter is then changed to '|', so one can be heterozygote in two ways; 0|1 or 1|0 . Autosomal Recessive For this model individuals can be carriers so healthy individuals can be heterozygous. Both alleles need to have the variant for an individual to be sick so a healthy individual can not be homozygous alternative and a sick individual has to be homozygous alternative. Affected individuals have to be homozygous alternative (hom. alt.) Healthy individuals cannot be hom. alt. Variant is considered de novo if both parents are genotyped and do not carry the variant The variants following this modell will be annotated with AR_hom , or AR_hom_dn for de novo Autosomal Dominant Affected individuals have to be heterozygous (het.) Healthy individuals cannot have the alternative variant Variant is considered de novo if both parents are genotyped and do not carry the variant The variants following this modell will be annotated with AD or AD_dn Special Case: If the variant belongs to a gene that have been annotated with reduced penetrance we will allow healthy carriers. (i.e. healthy individuals can be heterozygotes) Autosomal Compound Heterozygote This model includes pairs of variants that are present within the same gene. Non-phased data: Affected individuals have to be het. for both variants Healthy individuals can be het. for one of the variants but cannot have both variants Variant is considered de novo if only one or no variant is found in the parents Phased data: All affected individuals have to be het. for both variants and the variants has to be on two different alleles Healthy individuals can be heterozygous for one but cannot have both variants If only one or no variant is found in parents it is considered de novo Variant following this patters will be annotated with AR_comp or AR_comp_dn X-Linked Dominant These traits are inherited on the x-chromosome, of which men have one allele and women have two. Variant has to be on chromosome X Affected individuals have to be het. or hom. alt. Healthy males cannot carry the variant Healthy females can carry the variant (because of X inactivation) If sex is male the variant is considered de novo if mother is genotyped and does not carry the variant If sex is female variant is considered de novo if none of the parents carry the variant The variants following this modell will be annotated with XD or XD_dn X Linked Recessive Variant has to be on chromosome X Affected males have to be het. or hom. alt. (het is theoretically not possible in males, but can occur due to Pseudo Autosomal Regions). Healthy males cannot carry the variant Affected females have to be hom. alt. Healthy females cannot be hom. alt. If sex is male the variant is considered de novo if mother is genotyped and does not carry the variant If sex is female variant is considered de novo if not both parents carry the variant The variants following this modell will be annotated with XR or XR_dn","title":"Genetic Models"},{"location":"genetic-models/#conditions-for-genetic-models","text":"","title":"Conditions for Genetic Models"},{"location":"genetic-models/#short-explanation-of-genotype-calls-in-vcf-format","text":"Since we only look at humans, that are diploid, the genotypes represent what we see on both alleles in a single position. 0 represents the reference sequence, 1 is the first of the alternative alleles, 2 second alternative and so on. If no phasing has been done the genotype is an unordered pair on the form x/x , so 0/1 means that the individual is heterozygote in this given position with the reference base on one of the alleles and the first of the alternatives on the other. 2/2 means that we see the second of the alternatives on both alleles. Some chromosomes are only present in one copy in humans, here it is allowed to only use a single digit to show the genotype. A 0 would mean reference and 1 first of alternatives. If phasing has been done the pairs are not unordered anymore and the delimiter is then changed to '|', so one can be heterozygote in two ways; 0|1 or 1|0 .","title":"Short explanation of genotype calls in VCF format:"},{"location":"genetic-models/#autosomal-recessive","text":"For this model individuals can be carriers so healthy individuals can be heterozygous. Both alleles need to have the variant for an individual to be sick so a healthy individual can not be homozygous alternative and a sick individual has to be homozygous alternative. Affected individuals have to be homozygous alternative (hom. alt.) Healthy individuals cannot be hom. alt. Variant is considered de novo if both parents are genotyped and do not carry the variant The variants following this modell will be annotated with AR_hom , or AR_hom_dn for de novo","title":"Autosomal Recessive"},{"location":"genetic-models/#autosomal-dominant","text":"Affected individuals have to be heterozygous (het.) Healthy individuals cannot have the alternative variant Variant is considered de novo if both parents are genotyped and do not carry the variant The variants following this modell will be annotated with AD or AD_dn Special Case: If the variant belongs to a gene that have been annotated with reduced penetrance we will allow healthy carriers. (i.e. healthy individuals can be heterozygotes)","title":"Autosomal Dominant"},{"location":"genetic-models/#autosomal-compound-heterozygote","text":"This model includes pairs of variants that are present within the same gene. Non-phased data: Affected individuals have to be het. for both variants Healthy individuals can be het. for one of the variants but cannot have both variants Variant is considered de novo if only one or no variant is found in the parents Phased data: All affected individuals have to be het. for both variants and the variants has to be on two different alleles Healthy individuals can be heterozygous for one but cannot have both variants If only one or no variant is found in parents it is considered de novo Variant following this patters will be annotated with AR_comp or AR_comp_dn","title":"Autosomal Compound Heterozygote"},{"location":"genetic-models/#x-linked-dominant","text":"These traits are inherited on the x-chromosome, of which men have one allele and women have two. Variant has to be on chromosome X Affected individuals have to be het. or hom. alt. Healthy males cannot carry the variant Healthy females can carry the variant (because of X inactivation) If sex is male the variant is considered de novo if mother is genotyped and does not carry the variant If sex is female variant is considered de novo if none of the parents carry the variant The variants following this modell will be annotated with XD or XD_dn","title":"X-Linked Dominant"},{"location":"genetic-models/#x-linked-recessive","text":"Variant has to be on chromosome X Affected males have to be het. or hom. alt. (het is theoretically not possible in males, but can occur due to Pseudo Autosomal Regions). Healthy males cannot carry the variant Affected females have to be hom. alt. Healthy females cannot be hom. alt. If sex is male the variant is considered de novo if mother is genotyped and does not carry the variant If sex is female variant is considered de novo if not both parents carry the variant The variants following this modell will be annotated with XR or XR_dn","title":"X Linked Recessive"},{"location":"commands/annotate-models/","text":"Annotating Patterns of Inheritance Basic command $ genmod models --help Usage: genmod models [OPTIONS] <vcf_file> or - Annotate genetic models for vcf variants. Checks what patterns of inheritance that are followed in a VCF file. The analysis is family based so each family that are specified in the family file and exists in the variant file will get it's own annotation. Options: Options: -f, --family_file <ped_file> -t, --family_type [ped|alt|cmms|mip] If the analysis use one of the known setups, please specify which one. -r, --reduced_penetrance <tsv_file> File with gene ids that have reduced penetrance. --vep If variants are annotated with the Variant Effect Predictor. --phased If data is phased use this flag. -s, --strict If strict model annotations should be used(see documentation). -p, --processes INTEGER Define how many processes that should be use for annotation. --silent Do not print the variants. -k, --keyword TEXT What annotation keyword that should be used when searching for features. -o, --outfile FILENAME Specify the path to a file where results should be stored. --help Show this message and exit. Overview The genmod models command is used to annotate patterns of inheritance in vcf files. genmod can handle multiple families of arbitrary sizes in the same vcf. The individuals and families to be included in the analysis is specified in the family file that is given with the -f/--family_file option. Options and Arguments vcf_file This is the only mandatory argument. A proper vcf file or a stream with a vcf file is allways input family_file This is a file in ped like format that describes which individuals that should be considered in the analysis and how they are related. The default file format is ped but there are some alternatives. Please see -t/--family_type . family_type Family files are usually in the ped format but there are possibilities to use ped like files. If a ped file includes more columns than the first six mandatory (described here ) one may use the alt option for this parameter. reduced_penetrance Some phenotypes are known to have reduced penetrance. This means that healthy individuals can carry a heterozygous variant without being affected, while others that have the same variant are affected. When annotating inheritance patterns with genmod the user can provide a tab separated file where the first column describes a gene id per row. Use the flag -r/--reduced_penetrance to provide this file to genmod. Genmod will then allow healthy carriers for variants that resides in these genes when annotating the Autosomal Dominant inheritance pattern. vep This flag tell genmod that the variants are annotated with the Variant Effect Predictor . In this case the vep annotations will be used to determine if a compound pair is in the same gene. strict Only annotate that a genetic model is followed if there is \"proof\", which means that the variants are called in all individuals. phased This flag tell genmod that the variant calls are phased. This will make it possible for more accurate compound checks. For all autosomal chromosomes humans have two copies. If two variants resides on the same copy there will still be one copy that should produce \"healthy\" transcripts. With phased variants genmod can take this information into account. processes How many processes should be used during the analysis. If -p/--processes 1 the streaming functionality will work better for genmod since no intermediate file needs to be used, the variants will be processes line by line and printed directly. If there are several processes running at the same time the variants will be printed unordered to a intermediate file that will be sorted when all variants are analyzed. silent If no variants or headers should be printed to screen. This is mainly for testing. keyword This is the keyword in the vcf info field that genmod will look for when trying to find what genes the variant is annotated with. Default is Annotation since this is the keyword used by genmod annotate .","title":"Annotate Genetic Models"},{"location":"commands/annotate-models/#annotating-patterns-of-inheritance","text":"","title":"Annotating Patterns of Inheritance"},{"location":"commands/annotate-models/#basic-command","text":"$ genmod models --help Usage: genmod models [OPTIONS] <vcf_file> or - Annotate genetic models for vcf variants. Checks what patterns of inheritance that are followed in a VCF file. The analysis is family based so each family that are specified in the family file and exists in the variant file will get it's own annotation. Options: Options: -f, --family_file <ped_file> -t, --family_type [ped|alt|cmms|mip] If the analysis use one of the known setups, please specify which one. -r, --reduced_penetrance <tsv_file> File with gene ids that have reduced penetrance. --vep If variants are annotated with the Variant Effect Predictor. --phased If data is phased use this flag. -s, --strict If strict model annotations should be used(see documentation). -p, --processes INTEGER Define how many processes that should be use for annotation. --silent Do not print the variants. -k, --keyword TEXT What annotation keyword that should be used when searching for features. -o, --outfile FILENAME Specify the path to a file where results should be stored. --help Show this message and exit.","title":"Basic command"},{"location":"commands/annotate-models/#overview","text":"The genmod models command is used to annotate patterns of inheritance in vcf files. genmod can handle multiple families of arbitrary sizes in the same vcf. The individuals and families to be included in the analysis is specified in the family file that is given with the -f/--family_file option.","title":"Overview"},{"location":"commands/annotate-models/#options-and-arguments","text":"","title":"Options and Arguments"},{"location":"commands/annotate-models/#vcf_file","text":"This is the only mandatory argument. A proper vcf file or a stream with a vcf file is allways input","title":"vcf_file"},{"location":"commands/annotate-models/#family_file","text":"This is a file in ped like format that describes which individuals that should be considered in the analysis and how they are related. The default file format is ped but there are some alternatives. Please see -t/--family_type .","title":"family_file"},{"location":"commands/annotate-models/#family_type","text":"Family files are usually in the ped format but there are possibilities to use ped like files. If a ped file includes more columns than the first six mandatory (described here ) one may use the alt option for this parameter.","title":"family_type"},{"location":"commands/annotate-models/#reduced_penetrance","text":"Some phenotypes are known to have reduced penetrance. This means that healthy individuals can carry a heterozygous variant without being affected, while others that have the same variant are affected. When annotating inheritance patterns with genmod the user can provide a tab separated file where the first column describes a gene id per row. Use the flag -r/--reduced_penetrance to provide this file to genmod. Genmod will then allow healthy carriers for variants that resides in these genes when annotating the Autosomal Dominant inheritance pattern.","title":"reduced_penetrance"},{"location":"commands/annotate-models/#vep","text":"This flag tell genmod that the variants are annotated with the Variant Effect Predictor . In this case the vep annotations will be used to determine if a compound pair is in the same gene.","title":"vep"},{"location":"commands/annotate-models/#strict","text":"Only annotate that a genetic model is followed if there is \"proof\", which means that the variants are called in all individuals.","title":"strict"},{"location":"commands/annotate-models/#phased","text":"This flag tell genmod that the variant calls are phased. This will make it possible for more accurate compound checks. For all autosomal chromosomes humans have two copies. If two variants resides on the same copy there will still be one copy that should produce \"healthy\" transcripts. With phased variants genmod can take this information into account.","title":"phased"},{"location":"commands/annotate-models/#processes","text":"How many processes should be used during the analysis. If -p/--processes 1 the streaming functionality will work better for genmod since no intermediate file needs to be used, the variants will be processes line by line and printed directly. If there are several processes running at the same time the variants will be printed unordered to a intermediate file that will be sorted when all variants are analyzed.","title":"processes"},{"location":"commands/annotate-models/#silent","text":"If no variants or headers should be printed to screen. This is mainly for testing.","title":"silent"},{"location":"commands/annotate-models/#keyword","text":"This is the keyword in the vcf info field that genmod will look for when trying to find what genes the variant is annotated with. Default is Annotation since this is the keyword used by genmod annotate .","title":"keyword"},{"location":"commands/annotate-variants/","text":"Annotate Variants Overview To annotate the compound heterozygote model of inheritance we need to know if variants reside in the same gene. With genmod annotate <file.vcf> -r/--annotate_regions each variant will be annotate with what genes they overlap and if they are exonic variants. By default the annotations that follow the package is used, these are built from the latest refSeq dataset. It is possible to build a new annotation database with the genmod build command if the user prefere other annotations. genmod annotate can also be used to annotate variants from different sources such as frequency databases etc. Command $ genmod annotate --help Usage: genmod annotate [OPTIONS] <vcf_file> or - Annotate vcf variants. Annotate variants with a number of different sources. Please use --help for more info. Options: -r, --annotate_regions Increase output verbosity. -c, --cadd_file PATH Specify the path to a bgzipped cadd file (with index) with variant scores. This command can be used multiple times if multiple cadd files. --thousand_g PATH Specify the path to a bgzipped vcf file (with index) with 1000g variants --exac PATH Specify the path to a bgzipped vcf file (with index) with exac variants. -a, --annotation_dir PATH Specify the path to the directory where the annotation databases are. Default is the gene pred files that comes with the distribution. -o, --outfile FILENAME Specify the path to a file where results should be stored. -s, --silent Do not print the variants. --cadd_raw If the raw cadd scores should be annotated. -p, --processes INTEGER Define how many processes that should be use for annotation. --help Show this message and exit.","title":"Annotating Variants"},{"location":"commands/annotate-variants/#annotate-variants","text":"","title":"Annotate Variants"},{"location":"commands/annotate-variants/#overview","text":"To annotate the compound heterozygote model of inheritance we need to know if variants reside in the same gene. With genmod annotate <file.vcf> -r/--annotate_regions each variant will be annotate with what genes they overlap and if they are exonic variants. By default the annotations that follow the package is used, these are built from the latest refSeq dataset. It is possible to build a new annotation database with the genmod build command if the user prefere other annotations. genmod annotate can also be used to annotate variants from different sources such as frequency databases etc.","title":"Overview"},{"location":"commands/annotate-variants/#command","text":"$ genmod annotate --help Usage: genmod annotate [OPTIONS] <vcf_file> or - Annotate vcf variants. Annotate variants with a number of different sources. Please use --help for more info. Options: -r, --annotate_regions Increase output verbosity. -c, --cadd_file PATH Specify the path to a bgzipped cadd file (with index) with variant scores. This command can be used multiple times if multiple cadd files. --thousand_g PATH Specify the path to a bgzipped vcf file (with index) with 1000g variants --exac PATH Specify the path to a bgzipped vcf file (with index) with exac variants. -a, --annotation_dir PATH Specify the path to the directory where the annotation databases are. Default is the gene pred files that comes with the distribution. -o, --outfile FILENAME Specify the path to a file where results should be stored. -s, --silent Do not print the variants. --cadd_raw If the raw cadd scores should be annotated. -p, --processes INTEGER Define how many processes that should be use for annotation. --help Show this message and exit.","title":"Command"},{"location":"commands/build-annotation/","text":"Build new annotations with genmod Basic command $ genmod build --help Usage: genmod build [OPTIONS] ANNOTATION_FILE Build a new annotation database Build an annotation database from an annotation file. Options: -o, --outdir PATH Specify the path to a folder where the annotation files should be stored. -t, --annotation_type [bed|ccds|gtf|gene_pred|gff] Specify the format of the annotation file. --splice_padding INTEGER Specify the the number of bases that the exons should be padded with. Default is 2 bases. -v, --verbose Increase output verbosity. --help Show this message and exit. Overview The build command is used for building new annotations. This could be used if another gene defenition than default (refSeq) are preferred, if other regions than genes should be used to annotate compounds or if another organism than humans are used in the analysis. The supported formats are bed, ccds, gtf, gene_pred, gff . Small examples for the supported formats in conftest.py","title":"Build References"},{"location":"commands/build-annotation/#build-new-annotations-with-genmod","text":"","title":"Build new annotations with genmod"},{"location":"commands/build-annotation/#basic-command","text":"$ genmod build --help Usage: genmod build [OPTIONS] ANNOTATION_FILE Build a new annotation database Build an annotation database from an annotation file. Options: -o, --outdir PATH Specify the path to a folder where the annotation files should be stored. -t, --annotation_type [bed|ccds|gtf|gene_pred|gff] Specify the format of the annotation file. --splice_padding INTEGER Specify the the number of bases that the exons should be padded with. Default is 2 bases. -v, --verbose Increase output verbosity. --help Show this message and exit.","title":"Basic command"},{"location":"commands/build-annotation/#overview","text":"The build command is used for building new annotations. This could be used if another gene defenition than default (refSeq) are preferred, if other regions than genes should be used to annotate compounds or if another organism than humans are used in the analysis. The supported formats are bed, ccds, gtf, gene_pred, gff . Small examples for the supported formats in conftest.py","title":"Overview"},{"location":"commands/filter-variants/","text":"Filter Variants Filter variants based on some annotation from the INFO field of a vcf file. Examples genmod -v filter examples/test_vcf_annotated.vcf -a 1000G_freq -t 0.01 This command will skip all variants that have a 1000G_freq < 0.01. By default all variants that lack 1000G_freq will be kept, this can be modified by the -d/--discard flag. genmod -v filter examples/test_vcf_annotated.vcf -a CADD -t 7 --greater --discard Here we will filter out all variants that have annotation CADD less than 7 and all variants that miss the CADD flag. Command $ genmod filter --help Usage: genmod filter [OPTIONS] <vcf_file> or - Filter vcf variants. Filter variants based on their annotation Options: -a, --annotation TEXT Specify the info annotation to search for. Default 1000GAF -t, --threshold FLOAT Threshold for filter variants. Default 0.05 -d, --discard If variants without the annotation should be discarded -g, --greater If greater than threshold should be used instead of less thatn threshold. -s, --silent Do not print the variants. -o, --outfile FILENAME Specify the path to a file where results should be stored. --help Show this message and exit.","title":"Filter Variants"},{"location":"commands/filter-variants/#filter-variants","text":"Filter variants based on some annotation from the INFO field of a vcf file.","title":"Filter Variants"},{"location":"commands/filter-variants/#examples","text":"genmod -v filter examples/test_vcf_annotated.vcf -a 1000G_freq -t 0.01 This command will skip all variants that have a 1000G_freq < 0.01. By default all variants that lack 1000G_freq will be kept, this can be modified by the -d/--discard flag. genmod -v filter examples/test_vcf_annotated.vcf -a CADD -t 7 --greater --discard Here we will filter out all variants that have annotation CADD less than 7 and all variants that miss the CADD flag.","title":"Examples"},{"location":"commands/filter-variants/#command","text":"$ genmod filter --help Usage: genmod filter [OPTIONS] <vcf_file> or - Filter vcf variants. Filter variants based on their annotation Options: -a, --annotation TEXT Specify the info annotation to search for. Default 1000GAF -t, --threshold FLOAT Threshold for filter variants. Default 0.05 -d, --discard If variants without the annotation should be discarded -g, --greater If greater than threshold should be used instead of less thatn threshold. -s, --silent Do not print the variants. -o, --outfile FILENAME Specify the path to a file where results should be stored. --help Show this message and exit.","title":"Command"},{"location":"commands/score-compounds/","text":"Score Compounds This module performs ranking of compound variants. [!WARNING] Ranking of compound variants is only done for the first family in the VCF. During the ranking of these compounds the rank score might be modified in place. See genmod/score_variants/compound_scorer.py:L248 . Rankscore Capping Since the rank scores are modified in place in this module, there's a risk that the modified rank score might fall outside the valid range of normalization bounds (MIN, MAX) that was established in the score_variants module. This applies to variants belonging to the lower range of rank scores. When this happens, the modified rank score is capped to (MIN, ) if it's of RankScore type or (0, 1) if it's of RankScoreNormalized type. In previous Genmod versions there were no such capping rule in effect. Earlier ranked variants from compounds module might show lower rank scores compared to this implementation.","title":"Score compounds"},{"location":"commands/score-compounds/#score-compounds","text":"This module performs ranking of compound variants. [!WARNING] Ranking of compound variants is only done for the first family in the VCF. During the ranking of these compounds the rank score might be modified in place. See genmod/score_variants/compound_scorer.py:L248 .","title":"Score Compounds"},{"location":"commands/score-compounds/#rankscore-capping","text":"Since the rank scores are modified in place in this module, there's a risk that the modified rank score might fall outside the valid range of normalization bounds (MIN, MAX) that was established in the score_variants module. This applies to variants belonging to the lower range of rank scores. When this happens, the modified rank score is capped to (MIN, ) if it's of RankScore type or (0, 1) if it's of RankScoreNormalized type. In previous Genmod versions there were no such capping rule in effect. Earlier ranked variants from compounds module might show lower rank scores compared to this implementation.","title":"Rankscore Capping"},{"location":"commands/score-variants/","text":"Score Variant Rank Score Normalization The rank score is MAXMIN normalized into range (0, 1) according to the following formula: RankScoreNormalized = (RankScore - CategorySumMin) / (CategorySumMax - CategorySumMin) where RankScore is the sum of rank score across categories (including rules such as min, max, sum etc) RankScore = SUM(Score_category_n) for 0...n categories and CategorySumMin is the sum of minimal score values for all categories, i. e CategorySumMin = SUM(CategoryMin_n) for 0...n categories . The same applies to CategorySumMax = SUM(CategoryMax_n) for 0...n categories . Refer to score_variants.py::score() method for implementation details. Additionally, also read in the score-compounds.md on compound scoring step that affects final rank score values.","title":"Score variants"},{"location":"commands/score-variants/#score-variant","text":"","title":"Score Variant"},{"location":"commands/score-variants/#rank-score-normalization","text":"The rank score is MAXMIN normalized into range (0, 1) according to the following formula: RankScoreNormalized = (RankScore - CategorySumMin) / (CategorySumMax - CategorySumMin) where RankScore is the sum of rank score across categories (including rules such as min, max, sum etc) RankScore = SUM(Score_category_n) for 0...n categories and CategorySumMin is the sum of minimal score values for all categories, i. e CategorySumMin = SUM(CategoryMin_n) for 0...n categories . The same applies to CategorySumMax = SUM(CategoryMax_n) for 0...n categories . Refer to score_variants.py::score() method for implementation details. Additionally, also read in the score-compounds.md on compound scoring step that affects final rank score values.","title":"Rank Score Normalization"},{"location":"commands/sort-variants/","text":"","title":"Sort Variants"}]}